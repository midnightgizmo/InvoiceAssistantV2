@page "/UserDetails";
@using InvoiceAssistantV2.Client.Classes.Server;
@using InvoiceAssistantV2.Client.Models;
@using InvoiceAssistantV2.Client.Models.Server.ResponseData;
@using InvoiceAssistantV2.Client.ViewModels.UserDetails;
@using InvoiceAssistantV2.Shared.Models.Database.User;
@using InvoiceAssistantV2.Client.Components;

@inject NavigationManager NavManager;
@inject HttpClient httpClient;
@inject AppSettings appSettings;
@inject ApplicationSharedData SharedData;

<section class="container">


	<!-- background color -->
	<div class="background-wallpaper"></div>

	<header class="page-header">
		<div>
			<div>
				<button @onclick='() => NavManager.NavigateTo("/")'>
					<!--<img src="/images/svg/Back-Arrow.svg" />-->
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.48 37.48">
						<defs>
							<style>
								.cls-1 {
									fill: none;
									stroke: currentColor;
									stroke-linejoin: round;
									stroke-width: 3px;
								}

								.cls-2 {
									fill: currentColor;
								}</style>
						</defs>
						<circle class="cls-1" cx="18.74" cy="18.74" r="17.24" />
						<path class="cls-2" d="M17.77,30.73a3.11,3.11,0,0,0,2.17,0,4.78,4.78,0,0,0,1.68-1.79,2,2,0,0,0,.32-1.21,9.46,9.46,0,0,0,0-1.06,8,8,0,0,0-.2-1L18.32,22H30.09a2.86,2.86,0,0,0,1.39-.69,6.88,6.88,0,0,0,1-1.86l0-2.19a5.72,5.72,0,0,0-1-1.69,3.36,3.36,0,0,0-1.49-.7l-11.74,0,3.46-3.74a3.39,3.39,0,0,0,.16-2.5A6,6,0,0,0,19.76,6.1,1.74,1.74,0,0,0,18,6L6.41,17a3.25,3.25,0,0,0-.35,1.19,3.76,3.76,0,0,0,.29,1.27L17.77,30.73" />
					</svg>
				</button>
			</div>

			<div><span>Users Details</span></div>

			<div class="usericon-container">
				<img src="/images/svg/User-Icon.svg" />
			</div>

		</div>
	</header>
@if (ViewModel.HaveRecievedUsersDataFromServer == true)
	{
		<div class="user-details">

			<EditForm Model="ViewModel.UsersDetails">


				<fieldset disabled="@(!ViewModel.IsViewModelEditable)">

					<div>
						<div>
							<label for="txtUsersName">Your name</label>
						</div>

						<div>
							@if (ViewModel.UsersDetails.IsInEditMode == true)
							{
								<input id="txtUsersName" type="text" @bind="ViewModel.UsersDetails.UsersName" autofocus/>
							}
							else
							{
								<div class="readonly">
									<span>@ViewModel.UsersDetails.UsersName</span>
									<button disabled="@(!ViewModel.IsViewModelEditable)"
								@onclick="ViewModel.UsersDetails.BeginEdit">
										<!--<img src="/images/svg/Edit-button-wtih-border.svg" alt="Edit Users Details"/>-->
										<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.77 15.77">
											<defs>
												<style>
													.border {
													fill: transparent;
													stroke: #727475;
													stroke-miterlimit: 10;
													stroke-width: 0;
													}

													.edit-button-2, .edit-button-4 {
													fill: #727475;
													}

													.edit-button-3 {
													fill: #e9e9e9;
													}

													.edit-button-4 {
													fill-rule: evenodd;
													}</style>
											</defs>
											<rect class="border" x="0.13" y="0.13" width="15.52" height="15.52" rx="2.97" />
											<polyline class="edit-button-2" points="2.64 10.42 1.94 14.04 5.64 13.38 2.64 10.42" />
											<path class="edit-button-3" d="M10.68,3c0-.25.3-.53.58-.81l0,0c.2-.21.41-.41.61-.42s.39.19.58.38l1.33,1.33c.17.17.33.33.33.5s-.16.32-.32.48l-.37.38c-.19.19-.38.38-.56.39s-.34-.15-.51-.32l-1.21-1.2c-.23-.24-.46-.47-.44-.73" />
											<polyline class="edit-button-3" points="2.82 10.93 2.28 13.71 5.12 13.21 2.82 10.93" />
											<path class="edit-button-4" d="M3.69,10c0-.26.3-.54.58-.82l4.5-4.5c.21-.21.42-.41.62-.42s.39.18.58.38L11.3,6c.16.16.33.33.33.49s-.16.33-.32.49l-4.9,4.9c-.19.19-.38.38-.56.4s-.34-.16-.51-.32L4.14,10.7c-.24-.23-.47-.47-.45-.72m-.55,0c0-.32.38-.67.73-1L8.64,4.17c.26-.26.52-.52.77-.53s.49.23.74.48l1.67,1.67c.21.21.42.42.42.63s-.2.41-.41.61L6.56,12.3c-.24.24-.48.48-.7.5s-.43-.19-.64-.4L3.7,10.88C3.41,10.58,3.11,10.29,3.14,10Z" />
											<path class="edit-button-4" d="M10.69,3c0-.26.3-.54.58-.81l0,0c.21-.21.41-.41.61-.42s.39.18.58.38l1.33,1.33c.17.16.34.33.34.49s-.16.33-.33.49l-.37.38c-.19.19-.38.38-.56.39s-.34-.15-.51-.32l-1.2-1.2c-.24-.24-.47-.47-.45-.73m-.37,0c0-.35.4-.72.78-1.09l0,0c.27-.27.55-.55.81-.56s.52.25.78.51l1.45,1.44c.22.22.44.44.44.66s-.21.44-.43.66l-.5.49c-.25.26-.51.51-.74.53s-.46-.2-.68-.42L10.92,4C10.61,3.71,10.29,3.4,10.32,3.06Z" />
											<path class="edit-button-3" d="M3.69,10c0-.25.3-.53.58-.81L8.8,4.61c.21-.2.41-.41.61-.41s.39.18.59.37L11.33,5.9c.16.17.33.34.33.5s-.16.33-.32.49l-4.93,5c-.19.19-.38.38-.56.39s-.34-.15-.51-.32l-1.21-1.2c-.23-.24-.46-.47-.44-.73" />
										</svg>
									</button>
								</div>
							}
						</div>
						@if (ViewModel.UsersDetails.IsInEditMode == true)
						{
							<div></div>
							<div>
								<button @onclick="ViewModel.UpdateUsersDetails">Update</button>
								<button @onclick="ViewModel.UsersDetails.CancelEdit">Cancel</button>
							</div>
						}
					</div>
				</fieldset>

			</EditForm>


		</div>

		<div class="list-of-payments-container">
			<header>
				<h2>List of Payments</h2>
			</header>
			<div class="new-payment-container">
				<label for="txtNewPaymentName">Add New Payment</label>
				<div>
					<input id="txtNewPaymentName" @bind="ViewModel.NewPaymentMethodName" />
					<button @onclick="this.ViewModel.AddNewPaymentAndOnSucsessNavigateToPaymentDetailsPage" 
							disabled="@(!ViewModel.IsViewModelEditable)">Add</button>
				</div>
			</div>
			<div class="payment-methods-table">
				@foreach (PaymentMethod aPaymentMethod in this.ViewModel.UsersDetails.PaymentMethods)
				{
					<div class="row">

						<div class="cell">
							<a href="/PaymentDetails/@(aPaymentMethod.Id.ToString())">Select</a>
						</div>

						<div class="cell">
							<div>@aPaymentMethod.Name</div>
						</div>

						<div class="cell">
							<ConfirmDeleteComponent Tag="aPaymentMethod" OnConfirmDelete="(args) => this.ConfirmDeleteComponent_OnConfirmDelete(args)" />
						</div>

						
					</div>
				}
			</div>
		</div>
	}
	else
	{
		<div class="loading-container">
			<span class="loader"></span>
		</div>
	}
</section>

@code {

	public UsersDetailsVM ViewModel { get; set; }
	public UsersDetails()
	{
		ViewModel = new UsersDetailsVM();
	}

	protected async override void OnParametersSet()
	{
		//UsersDetailsCommunication server = new UsersDetailsCommunication(this.httpClient, this.appSettings);

		await this.ViewModel.Inishazlise(this.httpClient, this.appSettings, this.NavManager, this.SharedData);

		//ServerResponseSingleUserDetails response = await server.GetUserDetailsAsync();
		//if (response.HasErrors == true)
		//	return;

		//ViewModel.UsersDetails = response.ReturnValue;
		//ViewModel.IsViewModelEditable = true;

		this.StateHasChanged();

	}

	/// <summary>
	/// When the user confirms they want to delete a row, this method will be called
	/// </summary>
	/// <param name="args">Tuple<ConfirmDeleteComponent, PaymentMethod></param>
	public async void ConfirmDeleteComponent_OnConfirmDelete(object args)
	{
		// the passed in object is a Tuple
		Tuple<ConfirmDeleteComponent, object> rowData;
		// the second item in the tuple is set as an object but we know its a PaymentMethod
		PaymentMethod paymentMethod;


		// cast the object to a tuple
		rowData = (Tuple<ConfirmDeleteComponent, object>)args;

		// cast the second item in the tuple to a PaymentMethod object
		paymentMethod = rowData.Item2 as PaymentMethod;


		// disable all buttons on the ConfirmDeleteComponent while we wait back for a response from the server.
		rowData.Item1.ShouldDisableAllButtons = true;

		bool WasScusesfull = await this.ViewModel.DeletePaymentMethod(paymentMethod);

		// if we were sucsefull in deleteing the payment methodd, update the UI (remove the row)
		if (WasScusesfull == true)
			this.StateHasChanged();

		// allow buttons to be clicked again if needed.
		rowData.Item1.ShouldDisableAllButtons = false;
	}

}
