
@page "/Company"
@using InvoiceAssistantV2.Client.Classes.Server
@using InvoiceAssistantV2.Client.Components
@using InvoiceAssistantV2.Client.Models
@using InvoiceAssistantV2.Client.Models.Server.ResponseData
@using InvoiceAssistantV2.Client.ViewModels.Company
@using InvoiceAssistantV2.Shared.Models.Database.Company

@inject NavigationManager NavManger;
@inject HttpClient httpClient;
@inject AppSettings appSettings;

<section class="company-list-main-container">


	<header class="page-header">
		<div>
			<div>
				<button @onclick='() => NavManger.NavigateTo("/")'>
					<!--<img src="/images/svg/Back-Arrow.svg" />-->
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.48 37.48">
						<defs>
							<style>
								.cls-1 {
									fill: none;
									stroke: currentColor;
									stroke-linejoin: round;
									stroke-width: 3px;
								}

								.cls-2 {
									fill: currentColor;
								}</style>
						</defs>
						<circle class="cls-1" cx="18.74" cy="18.74" r="17.24" />
						<path class="cls-2" d="M17.77,30.73a3.11,3.11,0,0,0,2.17,0,4.78,4.78,0,0,0,1.68-1.79,2,2,0,0,0,.32-1.21,9.46,9.46,0,0,0,0-1.06,8,8,0,0,0-.2-1L18.32,22H30.09a2.86,2.86,0,0,0,1.39-.69,6.88,6.88,0,0,0,1-1.86l0-2.19a5.72,5.72,0,0,0-1-1.69,3.36,3.36,0,0,0-1.49-.7l-11.74,0,3.46-3.74a3.39,3.39,0,0,0,.16-2.5A6,6,0,0,0,19.76,6.1,1.74,1.74,0,0,0,18,6L6.41,17a3.25,3.25,0,0,0-.35,1.19,3.76,3.76,0,0,0,.29,1.27L17.77,30.73" />
					</svg>
				</button>
			</div>

			<div><span>Invoice Addressess</span></div>

			<div class="glasses-container">
				<img src="/images/svg/House.svg" />
			</div>

		</div>
	</header>

	<!-- background color -->
	<div class="background-wallpaper"></div>

	<!-- Add Invoice button container-->
	<div class="add-invoice-container">
		<button @onclick="cmdNewCompany_Click">
			<svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.96 15.98">
				<defs>
					<style>
						.cls-3 {
							fill: currentColor;
						}</style>
				</defs>
				<path class="cls-3" d="M9.79,9.75v5.09a.66.66,0,0,1-.29.61A2.63,2.63,0,0,1,8,16a2.58,2.58,0,0,1-1.48-.52.66.66,0,0,1-.3-.62l0-5.08-5.1,0a.66.66,0,0,1-.61-.29A2.49,2.49,0,0,1,0,8,2.58,2.58,0,0,1,.52,6.55a.66.66,0,0,1,.62-.3H6.22V1.14A.66.66,0,0,1,6.5.53,2.49,2.49,0,0,1,8,0,2.58,2.58,0,0,1,9.44.52a.65.65,0,0,1,.3.62V6.23h5.08a.63.63,0,0,1,.61.28A2.63,2.63,0,0,1,16,8a2.58,2.58,0,0,1-.52,1.48.7.7,0,0,1-.62.31H9.73" />
			</svg>
			<span>Add</span>
		</button>
	</div>

	<div class="serach-container">
		<header>
			<div>Search</div>
		</header>
		<div>
			<label for="txtFriendlyName">Friendly Name</label>
			<label for="txtCompanyName">Company Name</label>
			<input @bind-value="txtFriendlyName" type="text" name="txtFriendlyName" @bind-value:event="oninput" />
			<input @bind-value="txtCompanyName" type="text" name="txtCompanyName" @bind-value:event="oninput" />
		</div>
	</div>

	<div class="company-list-table">
		<div class="header-cell">
			<span>Edit</span>
		</div>

		<div class="header-cell">
			<span>Friendly Name</span>
		</div>

		<div class="header-cell">
			<span>Company Name</span>
		</div>

		<div class="header-cell">
			<span>Delete</span>
		</div>

		@if (ViewModel?.FilterdCompanyDetails != null)
		{
			@foreach (CompanyDetails aCompany in ViewModel.FilterdCompanyDetails)
			{
				<!-- edit -->
				<div class="row edit-container">
					<button @onclick="()=>cmdRowEdit_Click(aCompany)">
						<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12.61 12.6">
							<defs>
								<style>
									.cls-9, .cls-7 {
										fill: #727475;
									}

									.cls-8 {
										fill: #e9e9e9;
									}

									.cls-7 {
										fill-rule: evenodd;
									}</style>
							</defs>
							<polyline class="cls-9" points="0.7 8.97 0 12.6 3.7 11.94 0.7 8.97" />
							<path class="cls-8" d="M1.75,8.59c0-.26.3-.53.58-.81l4.5-4.51c.21-.2.41-.41.61-.42s.39.19.59.38L9.35,4.56c.17.17.34.33.34.5s-.16.32-.33.49l-4.89,4.9c-.2.19-.39.38-.56.39s-.34-.15-.51-.32L2.19,9.32c-.23-.24-.47-.47-.44-.73" />
							<path class="cls-8" d="M8.74,1.6c0-.26.3-.53.58-.81l0,0C9.5.6,9.71.4,9.91.39s.39.19.58.38L11.82,2.1c.16.16.33.33.33.49s-.16.33-.32.49l-.37.38c-.2.19-.39.38-.56.39s-.34-.15-.51-.32L9.18,2.33c-.23-.24-.47-.47-.44-.73" />
							<polyline class="cls-8" points="0.88 9.49 0.34 12.27 3.18 11.76 0.88 9.49" />
							<path class="cls-7" d="M1.75,8.53c0-.25.3-.53.58-.81l4.5-4.5C7,3,7.24,2.8,7.44,2.8s.4.18.59.38L9.36,4.51c.16.16.33.33.33.49s-.16.33-.32.49l-4.9,4.9c-.19.19-.38.38-.56.39s-.34-.15-.51-.31L2.2,9.26C2,9,1.73,8.79,1.75,8.53m-.55,0c0-.32.38-.67.73-1L6.7,2.72c.26-.25.52-.51.77-.52s.49.23.73.47L9.88,4.35c.21.21.42.42.42.62s-.2.42-.41.62L4.62,10.86c-.24.24-.48.48-.7.5s-.43-.2-.64-.4L1.76,9.44C1.47,9.14,1.17,8.85,1.2,8.52Z" />
							<path class="cls-7" d="M8.75,1.6c0-.26.3-.54.58-.82l0,0c.21-.2.41-.41.61-.41s.39.18.58.37l1.33,1.33c.17.17.34.34.34.5s-.16.33-.33.49l-.37.37c-.19.19-.38.38-.56.4s-.34-.15-.51-.32L9.2,2.32c-.24-.23-.47-.47-.45-.72m-.37,0c0-.34.4-.71.78-1.08l0,0C9.4.28,9.68,0,9.94,0s.52.25.78.5L12.17,2c.22.22.44.44.44.66s-.21.44-.43.65l-.5.5c-.25.26-.51.51-.74.53s-.46-.21-.68-.43L9,2.58C8.67,2.27,8.35,2,8.38,1.61Z" />
						</svg>
					</button>
				</div>
				<div class="row"><span>@aCompany.FriendlyName</span></div>
				<div class="row"><span>@aCompany.CompanyName</span></div>
				<!-- Delete-->
				<div class="row">
					<ConfirmDeleteComponent  Tag="aCompany" OnConfirmDelete="(args) => ConfirmDelete_Click(args)" />
				</div>
			}
		}

	</div>
</section>

@code {

	// below 2 properties are used in binding for the filtering of company details.

	private string _txtFriendlyName = string.Empty;
	private string txtFriendlyName 
	{
		get => this._txtFriendlyName;
		set
		{
			this._txtFriendlyName = value;
			txtInput_OnChange();
		}
	}

	private string _txtCompanyName = string.Empty;
	private string txtCompanyName
	{
		get => this._txtCompanyName;
		set
		{
			this._txtCompanyName = value;
			txtInput_OnChange();
		}
	}

	public CompanyDetailsListVM ViewModel { get; set; }


	protected override void OnParametersSet()
	{
		this.ViewModel = new CompanyDetailsListVM(httpClient, appSettings);

		// load all all the companies and list of companys from the server.
		// and when we have them call state change to make them show up in the UI
		this.ViewModel.LoadCompanyDetailsFromServerAsync().ContinueWith((t) => { this.StateHasChanged(); });

	}


	/// <summary>
	/// when the user wants to create a new Company
	/// </summary>
	public void cmdNewCompany_Click(MouseEventArgs args)
	{
		// navigate to the new company page
		NavManger.NavigateTo("Company/New");
	}

	/// <summary>
	/// when the user types in one of the search boxes (to filter the list of companies)
	/// </summary>
	public void txtInput_OnChange()
	{
		// remove any white spacing
		string FriendlyName = this.txtFriendlyName.Trim();
		string CompanyName = this.txtCompanyName.Trim();

		// if both serach fields are empty, return the full list of companys to dispaly to the user
		if (FriendlyName.Length == 0 && CompanyName.Length == 0)
		{
			// display everything
			this.ViewModel.FilterCompanyDetails(string.Empty, string.Empty);
		}

		// the following checks to see if we should filter the list of companys for the user.
		// Only start filtering if the user has typed in at least 3 letters.

		// only start searching when the textbox has at least 3 chars in it
		if(FriendlyName.Length > 2)
		{
			// we have friendly name and compnay name
			if(CompanyName.Length > 2)
			{
				this.ViewModel.FilterCompanyDetails(FriendlyName, CompanyName);
			}
			// we only have FriendlyName
			else
			{
				this.ViewModel.FilterCompanyDetails(FriendlyName, CompanyName);
			}
		}
		// we don't have friendly name
		else
		{
			// we have company name
			if(CompanyName.Length > 0)
			{
				this.ViewModel.FilterCompanyDetails(FriendlyName, CompanyName);
			}
			// we don't have friendly name or company name
			else
			{
				// display everything
				this.ViewModel.FilterCompanyDetails(string.Empty, string.Empty);
			}
		}
	}

	/// <summary>
	/// When the user has clicked the edit button on one of the rows
	/// </summary>
	public void cmdRowEdit_Click(CompanyDetails aCompany)
	{
		// navigate to the edit page passing the company id
		NavManger.NavigateTo("Company/Edit/" + aCompany.Id.ToString());
	}


	/// <summary>
	/// When the user has clicked the Tick button to confirm they want to delete this row.
	/// </summary>
	public async void ConfirmDelete_Click(object args)
	{
		// the passed in object is a Tuple
		Tuple<ConfirmDeleteComponent, object> rowData;
		// the second item in the tuple is set as an object but we know its a CompanyDetails
		CompanyDetails companyDetails;

		// cast the object to a tuple
		rowData = (Tuple<ConfirmDeleteComponent, object>)args;
		// cast the second item in the tuple to a CompnayDetails object
		companyDetails = rowData.Item2 as CompanyDetails;

		// disable all buttons on the ConfirmDeleteComponent while we wait back for a response from the server.
		rowData.Item1.ShouldDisableAllButtons = true;

		// used to send information to the server
		CompanyCommunication server = new CompanyCommunication(httpClient, appSettings);
		ServerResponseBool responseData;
		// reuquest the compnay be deleted on the server.
		responseData = await server.DeleteCompany(companyDetails.Id);

		// check if the row has been deleted
		if (responseData.HasErrors == false && 
			responseData.ReturnValue == true)
		{// the row has been deleted
			this.ViewModel.RemoveCompanyFromList(companyDetails);
			this.StateHasChanged();
		}
		else
		{// the row has not been deleted
			
			// do somthing to indicate the row was not able to be deleted.
		}

		rowData.Item1.ShouldDisableAllButtons = false;

	}
}
