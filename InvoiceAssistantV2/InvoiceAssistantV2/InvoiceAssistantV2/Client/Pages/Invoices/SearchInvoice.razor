@page "/Invoice/Search/"
@using InvoiceAssistantV2.Client.Models
@using InvoiceAssistantV2.Client.Models.Server.ResponseData
@using InvoiceAssistantV2.Client.ViewModels.Invoices
@using InvoiceAssistantV2.Shared.Models
@using InvoiceAssistantV2.Shared.Models.Database.Company

@inject NavigationManager NavManger;
@inject HttpClient httpClient;
@inject AppSettings appSettings;
@inject ApplicationSharedData SharedData;

<section class="invoice-search-container">
	<header>
		<div>
			<div>
				<button @onclick='() => NavManger.NavigateTo("/")'>
					<!--<img src="/images/svg/Back-Arrow.svg" />-->
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.48 37.48">
						<defs>
							<style>.cls-1{fill:none;stroke:currentColor;stroke-linejoin:round;stroke-width:3px;}.cls-2{fill:currentColor;}</style>
							</defs>
							<circle class="cls-1" cx="18.74" cy="18.74" r="17.24"/><path class="cls-2" d="M17.77,30.73a3.11,3.11,0,0,0,2.17,0,4.78,4.78,0,0,0,1.68-1.79,2,2,0,0,0,.32-1.21,9.46,9.46,0,0,0,0-1.06,8,8,0,0,0-.2-1L18.32,22H30.09a2.86,2.86,0,0,0,1.39-.69,6.88,6.88,0,0,0,1-1.86l0-2.19a5.72,5.72,0,0,0-1-1.69,3.36,3.36,0,0,0-1.49-.7l-11.74,0,3.46-3.74a3.39,3.39,0,0,0,.16-2.5A6,6,0,0,0,19.76,6.1,1.74,1.74,0,0,0,18,6L6.41,17a3.25,3.25,0,0,0-.35,1.19,3.76,3.76,0,0,0,.29,1.27L17.77,30.73"/>
						</svg>
				</button>
			</div>
			
			<div><span>Search Invoices</span></div>

			<div class="glasses-container">
				<img src="/images/svg/Glasses.svg" />
			</div>
			
		</div>
	</header>

	<div class="search-outer-container">
		<EditForm Model="ViewModel.FormModel" class="search-container" OnValidSubmit="async () => await Form_ValidSubmit()">

			<!-- Date -->
			<div class="date-container">
				<header>Date of Invoice</header>
				<label for="InvoiceStartDate">From</label>
				<div>
					<input id="InvoiceStartDate" name="InvoiceStartDate" type="date" @bind-value="ViewModel.FormModel.StartDate" />
				</div>
				<label for="InvoiceEndDate">To</label>
				<div>
					<input id="InvoiceEndDate" name="InvoiceEndDate" type="date" @bind-value="ViewModel.FormModel.EndDate" />
				</div>
			</div>

			<!-- Ammount -->
			<div class="ammount-container">
				<header>Ammount</header>
				<label for="AmmountFrom">From</label>
				<div>
					<input id="AmmountFrom" name="AmmountFrom" type="text" @bind-value="ViewModel.FormModel.StartAmmount" />
				</div>
				<label for="AmmountTo">To</label>
				<div>
					<input id="AmmountTo" name="AmmountTo" type="text" @bind-value="ViewModel.FormModel.EndAmmount" />
				</div>
			</div>

			<!-- Recieved On -->
			<div class="recievedon-container">
				<header>Recieved On</header>
				<label for="RecievedOnFrom">From</label>
				<div>
					<input id="RecievedOnFrom" name="RecievedOnFrom" type="date" @bind-value="ViewModel.FormModel.DateRecievedMoneyStart" />
				</div>
				<label for="RecievedOnTo">To</label>
				<div>
					<input id="RecievedOnTo" name="RecievedOnTo" type="date" @bind-value="ViewModel.FormModel.DateRecievedMoneyEnd" />
				</div>
			</div>

			<!-- Ref Number -->
			<div class="refnumber-container">
				<header>Ref Number</header>
				<div></div>
				<div>
					<input id="RefNumber" name="RefNumber" type="text" @bind-value="ViewModel.FormModel.ReferenceNumber" />
				</div>
			</div>

			<!-- Payment Type -->
			<div class="paymenttype-container">
				<header>Payment Type</header>
				<div></div>
				<div>
					<select @bind="ViewModel.FormModel.TypeOfPaymentId">
						<!-- A blank option, which is used to indicate we dont' want to serach by payment type -->
						<option value="-1"></option>
						@if (ViewModel?.PaymentTypes != null)
						{
							@foreach (var aPayment in ViewModel?.PaymentTypes)
							{
								<option value="@aPayment.Id">@aPayment.Name</option>
							}
						}
					</select>
				</div>
			</div>


			<!-- Company -->
			<div class="company-container">
				<header>Company</header>
				<div>
					<select @bind="ViewModel.FormModel.AddressToMakePaymentOutToId">
						<!-- A blank option, which is used to indicate we don't want to search by Company -->
						<option value="-1"></option>
						@if (ViewModel?.CompanyDetails != null)
						{
							@foreach (CompanyDetails aCompany in ViewModel?.CompanyDetails)
							{
								<option value="@aCompany.Id">@aCompany.CompanyName</option>
							}
						}
					</select>
				</div>
			</div>

			<!-- Description -->
			<div class="description-container">
				<header>Description</header>
				<div>
					<input id="Description" name="Description" type="text" @bind-value="ViewModel.FormModel.Description" />
				</div>
			</div>

			<section class="errormessage-container">
				<div>
					@ViewModel.PageErrorText
				</div>
			</section>

			<div class="submit-container">
				<button type="submit">
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.27 19.02">
						<defs>
							<style>
								.cls-3 {
									fill: #fff;
									stroke: #000;
									stroke-miterlimit: 10;
									stroke-width: 0.1px;
									fill-rule: evenodd;
								}</style>
						</defs>
						<path class="cls-3" d="M7.39,2.6A4.54,4.54,0,1,1,2.85,7.14,4.54,4.54,0,0,1,7.39,2.6Zm4,10.9a7.24,7.24,0,1,1,2.34-2.45l5.37,5.35a.68.68,0,0,1,.16,1A5.51,5.51,0,0,1,17.61,19a.67.67,0,0,1-1-.15l-5.31-5.31" transform="translate(-0.12 -0.12)" />
					</svg>

					<div>Search</div>
				</button>
			</div>

		</EditForm>

		
	</div>
</section>

@code {

	public SearchInvoiceVM ViewModel { get; set; }

	protected override void OnParametersSet()
	{
		// if this is the first time this page has been visted
		if (SharedData.vmSearch != null)
			this.ViewModel = SharedData.vmSearch; // create a new view model
		// if this page has been visted before
		else
		{
			// load the page the way it was last visited (keep any data in the search boxes that were there on last visit to the page)
			SharedData.vmSearch = new SearchInvoiceVM(httpClient, appSettings);
			this.ViewModel = SharedData.vmSearch;

		}
		this.ViewModel.FormModel.TypeOfPaymentId = -1;
		// load all the payment types and list of companys from the server.
		// and when we have them call state change to make them show up in the UI
		this.ViewModel.LoadPaymentAndCompanyDetailsFromServer().ContinueWith((t) => {this.StateHasChanged(); });
	
	}

	public async Task Form_ValidSubmit()
	{
		ServerResponseListOfInvoices response = await ViewModel.SendSearchRquestToServer();

		if (ViewModel.AreThereErrorsInResponseData(response) == false)
		{
			// pass the list of invoices returned from the server to the shared data object we pass around the application
			SharedData.InvoicesFromSearchResults = response.ReturnValue;
			// navigate to Invoices page and display all the invoices by accessing the SharedData.InvoicesFromSearchResults property.
			NavManger.NavigateTo("/Invoice/List/");
		}

	}
}
