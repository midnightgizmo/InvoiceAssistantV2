@page "/Invoice/List/"
@using InvoiceAssistantV2.Client.Models;
@using InvoiceAssistantV2.Client.ViewModels.Invoices.Add;
@using InvoiceAssistantV2.Client.ViewModels.Invoices.SearchResults;
@using InvoiceAssistantV2.Shared.Models.Database.Company;
@using InvoiceAssistantV2.Client.Pages.Invoices.SearchResults;


@inject ApplicationSharedData SharedData;
@inject NavigationManager NavManager;
@inject HttpClient httpClient;
@inject AppSettings appSettings;

<section class="invoice-list-page">

	<!-- A hidden element. Cross icon that will be referenced further down the page -->
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 8.03 8.03" 
		 style="width:0; height:auto; display:none;">
		<symbol id="cross-icon-svg" viewBox="0 0 8.03 8.03">
			<defs>
				<style>
					.cls-12 {
						fill: currentColor;
					}</style>
			</defs>
			<path class="cls-12" d="M5.25,4,7.08,5.84c.26.26.52.53.79.79a.46.46,0,0,1,0,.69c-.17.17-.35.33-.51.51a.47.47,0,0,1-.76,0L4.1,5.33,4,5.24a.27.27,0,0,1-.07.08L1.41,7.86a.45.45,0,0,1-.7,0L.16,7.31a.44.44,0,0,1,0-.68L2.72,4.08s0-.08,0-.13L.17,1.41a.46.46,0,0,1,0-.72L.71.16a.46.46,0,0,1,.69,0L4,2.72c0,.06.08,0,.12,0C4.93,1.87,5.78,1,6.62.17A.52.52,0,0,1,7.06,0a.49.49,0,0,1,.27.15L7.87.7a.47.47,0,0,1,0,.7L5.62,3.65,5.25,4" />
		</symbol>
	</svg>

	<!-- A hidden elment. Tick icon that will be referenced further down the page -->
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 7.15 7.87"
		 style="width:0; height:auto; display:none;">
		<symbol id="tick-icon-svg" viewBox="0 0 7.15 7.87">
			<defs>
				<style>
					.cls-13 {
						fill: currentColor;
					}</style>
			</defs>
			<path class="cls-13" d="M1.38,4l1.46,2A30.61,30.61,0,0,1,4.91,1.85,6.17,6.17,0,0,1,6.82,0l.33,1.65A14.27,14.27,0,0,0,5.63,3.58c-.72,1-1.75,2.66-2.78,4.29A13.42,13.42,0,0,0,1.57,6.42,15.11,15.11,0,0,0,0,5.17L1.38,4" />
		</symbol>
	</svg>

	<!-- A hidden elment. Printer icon that will be referenced further down the page -->
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.34 19.34" 
		 style="width:0; height:auto; display:none;">

		<symbol id="printer-icon-svg" viewBox="0 0 19.34 19.34">
			 <defs>
				<style>
					.cls-100{fill:#358ec5;}
					.cls-200{fill:none;stroke:#026eb4;stroke-linejoin:round;stroke-width:0.75px;}
					.cls-300{fill:#e8e8e8;}
					.cls-400{fill:#a09f9f;}
					.cls-500{fill:#d2d2d2;}
					.cls-600{fill:#fff;}</style>
			</defs>
			<path class="cls-100" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z"/>
			<path class="cls-200" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z"/>
			<path class="cls-300" d="M3.31,6.33H6v2.3h7.1V6.33h2.58a.29.29,0,0,1,.3.29V9.35a.29.29,0,0,1-.3.3H3.31A.29.29,0,0,1,3,9.35V6.62a.29.29,0,0,1,.29-.29"/>
			<path class="cls-400" d="M14.93,6.58a.31.31,0,1,1-.32.31.31.31,0,0,1,.32-.31"/>
			<path class="cls-400" d="M14.93,7.61a.31.31,0,1,1-.31.31.31.31,0,0,1,.31-.31"/>
			<path class="cls-500" d="M16,10.2v3.06a.3.3,0,0,1-.29.3H13.08V12.05H6v1.52H3.4a.3.3,0,0,1-.3-.3V10.2H16"/>
			<polyline class="cls-600" points="6.41 12.44 12.62 12.44 12.62 14.99 6.41 14.99 6.41 12.44"/>
			<polyline class="cls-600" points="6.43 3.38 12.64 3.38 12.64 8.25 6.43 8.25 6.43 3.38"/>
		</symbol>
	</svg>

	<!-- A hidden elment. Info icon that will be referenced further down the page -->
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.34 19.34" 
		 style="width:0; height:auto; display:none;">

		<symbol id="info-icon-svg" viewBox="0 0 19.34 19.34">
			<defs>
				<style>
					.cls-101 {
						fill: #358ec5;
					}

					.cls-201 {
						fill: none;
						stroke: #026eb4;
						stroke-linejoin: round;
						stroke-width: 0.75px;
					}

					.cls-301 {
						fill: #fff;
					}</style>
			</defs>
			<path class="cls-101" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z" />
			<path class="cls-201" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z" />
			<path class="cls-301" d="M6.54,7.47A4,4,0,0,1,8.15,7,5.19,5.19,0,0,1,9.68,7a2,2,0,0,1,1,.43,1.52,1.52,0,0,1,.51.9,4.19,4.19,0,0,1,0,1.41,14.3,14.3,0,0,1-.42,1.38,14,14,0,0,0-.52,2.2c-.11.78-.11,1.5.26,1.7s1.14-.13,1.49-.19.31.13.27.34-.08.42-.6.67a6.47,6.47,0,0,1-2.26.55,2.59,2.59,0,0,1-1.66-.48A1.39,1.39,0,0,1,7,14.61a14.16,14.16,0,0,1,.69-2.92c.35-1.18.71-2.49.46-3s-1.09-.33-1.52-.25-.44.06-.46,0a1.08,1.08,0,0,1,.35-1" />
			<path class="cls-301" d="M10.68,2a1.78,1.78,0,0,1,1.75,1.81,1.75,1.75,0,1,1-3.5,0A1.78,1.78,0,0,1,10.68,2" />
		</symbol>
		
	</svg>

	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.35 19.35"
		 style="width:0; height:auto; display:none;">

		<symbol id="info-icon-svg-cancel"viewBox="0 0 19.35 19.35">
			<defs>
				<style>
					.cls-401 {
						fill: #358ec5;
					}

					.cls-402 {
						fill: none;
						stroke: #026eb4;
						stroke-linejoin: round;
						stroke-width: 0.75px;
					}

					.cls-403 {
						fill: #fff;
					}

					.cls-404 {
						fill: #d94d4d;
						opacity: 0.8;
					}</style>
			</defs>
			<path class="cls-401" d="M9.67.38A9.3,9.3,0,1,1,.38,9.69v0A9.3,9.3,0,0,1,9.67.38Z" transform="translate(0 0)" />
			<path class="cls-402" d="M9.67.38A9.3,9.3,0,1,1,.38,9.69v0A9.3,9.3,0,0,1,9.67.38Z" transform="translate(0 0)" />
			<path class="cls-403" d="M6.54,7.47A4,4,0,0,1,8.15,7,4.91,4.91,0,0,1,9.68,7a2,2,0,0,1,1,.43,1.52,1.52,0,0,1,.51.9,4.17,4.17,0,0,1,0,1.41q-.18.71-.42,1.38a13.8,13.8,0,0,0-.52,2.2c-.11.78-.11,1.5.26,1.7s1.14-.13,1.49-.19.31.13.27.34-.08.42-.6.67a6.52,6.52,0,0,1-2.26.55,2.59,2.59,0,0,1-1.66-.48A1.39,1.39,0,0,1,7,14.61a14.6,14.6,0,0,1,.69-2.92c.35-1.18.71-2.49.46-3s-1.09-.33-1.52-.25-.44.06-.46,0a1.08,1.08,0,0,1,.35-1" transform="translate(0 0)" />
			<path class="cls-403" d="M10.68,2a1.78,1.78,0,0,1,1.75,1.81h0a1.75,1.75,0,0,1-3.5,0A1.78,1.78,0,0,1,10.68,2h0" transform="translate(0 0)" />
			<path class="cls-404" d="M11.55,9.67l2.76,2.76,1.19,1.2a.68.68,0,0,1,0,1c-.25.26-.52.5-.76.77a.72.72,0,0,1-1.16,0L9.8,11.67a1.08,1.08,0,0,1-.13-.15.75.75,0,0,1-.11.13L5.73,15.49a.68.68,0,0,1-1.07,0l-.83-.82a.68.68,0,0,1,0-1L7.7,9.77c.09-.08.09-.11,0-.2L3.85,5.72a.69.69,0,0,1,0-1.08l.81-.81a.69.69,0,0,1,1,0C7,5.13,8.3,6.42,9.58,7.71c.09.09.13.06.19,0,1.29-1.28,2.57-2.57,3.85-3.85a.76.76,0,0,1,.66-.25.73.73,0,0,1,.4.23c.28.27.55.55.82.82a.7.7,0,0,1,0,1.07l-3.4,3.4-.55.55" transform="translate(0 0)" />
		</symbol>

	</svg>

	<!-- A hidden elment. bin icon that will be referenced further down the page -->
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.34 19.34" 
		 style="width:0; height:auto; display:none;">
		<symbol id="bin-icon-svg" viewBox="0 0 19.34 19.34">
			<defs>
				<style>
					.cls-102{fill:#358ec5;}
					.cls-202{fill:none;stroke:#026eb4;stroke-linejoin:round;stroke-width:0.75px;}
					.cls-302{fill:#fff;}
				</style>
			</defs>
			<path class="cls-102" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z"/>
			<path class="cls-202" d="M9.67.38A9.3,9.3,0,1,1,.38,9.67,9.3,9.3,0,0,1,9.67.38Z"/>
			<polyline class="cls-302" points="5.88 6.42 7.2 6.42 7.2 16 5.88 16 5.88 6.42"/>
			<polyline class="cls-302" points="12.39 6.43 13.7 6.43 13.7 16 12.39 16 12.39 6.43"/>
			<polyline class="cls-302" points="7.15 14.67 12.47 14.67 12.47 16 7.15 16 7.15 14.67"/>
			<polyline class="cls-302" points="7.16 6.42 12.41 6.42 12.41 7.73 7.16 7.73 7.16 6.42"/>
			<polyline class="cls-302" points="8.68 7.64 9.35 7.64 9.35 14.7 8.68 14.7 8.68 7.64"/>
			<polyline class="cls-302" points="10.33 7.67 11 7.67 11 14.73 10.33 14.73 10.33 7.67"/>
			<polyline class="cls-302" points="5.12 4.2 14.64 4.2 14.64 5.63 5.12 5.63 5.12 4.2"/>
			<polyline class="cls-302" points="8.76 2.78 11.08 2.78 11.08 3.43 8.76 3.43 8.76 2.78"/>
		</symbol>
	</svg>


	<!-- background color -->
	<div class="background-wallpaper"></div>

	<header class="page-header">
		<div>
			<div>
				<button @onclick='() => NavManager.NavigateTo("/")'>
					<!--<img src="/images/svg/Back-Arrow.svg" />-->
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.48 37.48">
						<defs>
							<style>
								.cls-1 {
									fill: none;
									stroke: currentColor;
									stroke-linejoin: round;
									stroke-width: 3px;
								}

								.cls-2 {
									fill: currentColor;
								}</style>
						</defs>
						<circle class="cls-1" cx="18.74" cy="18.74" r="17.24" />
						<path class="cls-2" d="M17.77,30.73a3.11,3.11,0,0,0,2.17,0,4.78,4.78,0,0,0,1.68-1.79,2,2,0,0,0,.32-1.21,9.46,9.46,0,0,0,0-1.06,8,8,0,0,0-.2-1L18.32,22H30.09a2.86,2.86,0,0,0,1.39-.69,6.88,6.88,0,0,0,1-1.86l0-2.19a5.72,5.72,0,0,0-1-1.69,3.36,3.36,0,0,0-1.49-.7l-11.74,0,3.46-3.74a3.39,3.39,0,0,0,.16-2.5A6,6,0,0,0,19.76,6.1,1.74,1.74,0,0,0,18,6L6.41,17a3.25,3.25,0,0,0-.35,1.19,3.76,3.76,0,0,0,.29,1.27L17.77,30.73" />
					</svg>
				</button>
			</div>

			<div><span>Search Invoices</span></div>

			<div class="glasses-container">
				<img src="/images/svg/Glasses.svg" />
			</div>

		</div>
	</header>

	<div class="list-invoices-outer-container">
		<div>
			<header>
				<div><span>Date</span></div>
				<div><span>Ref No.</span></div>
				<div><span>Description</span></div>
				<div><span>Ammount (£)</span></div>
				<div><span>Payment Type</span></div>
				<div><span>In Account On</span></div>
			</header>
		@foreach (ListInvoiceRowViewModel anInvoiceRowViewModel in this.ViewModel.InvoiceRowsViewModel)
		{
			<!-- a row-->
			<div class='row @(anInvoiceRowViewModel.IsRowInEditState == true ? "edit-mode" : "read-only-mode")'>
				
				
				<!-- Invoice date -->
				<div class="invoice-main-details">
					<!-- Read only invoice date -->
					<div class='read-only @(anInvoiceRowViewModel.InvoiceDateCell.IsBeingEdited == true ? "hide" : "show")' 
						 @ondblclick="anInvoiceRowViewModel.InvoiceDateCell.BeginEdit">
						<div>@anInvoiceRowViewModel.InvoiceData.DateOfInvoice.ToString("dd/MM/yyyy")</div>
					</div>
					<!-- Editable invoice invoice date -->
					<div class='edit @(anInvoiceRowViewModel.InvoiceDateCell.IsBeingEdited == true ? "show" : "hide")'>
							<input type="date" @bind-value="anInvoiceRowViewModel.InvoiceEditData.DateOfInvoice" 
								   @onkeydown="(async (KeyboardEventArgs evt)=>{await ProcecssKeypress(evt,anInvoiceRowViewModel.InvoiceDateCell);})" />
						<div class="confirm-or-cancel-container">
							<button @onclick="anInvoiceRowViewModel.InvoiceDateCell.EndEdit" class="button-tick"
									disabled="@anInvoiceRowViewModel.InvoiceDateCell.IsInSubmitState">
								<svg>
									<use href="#tick-icon-svg"></use>
								</svg>
							</button>

							<button @onclick="anInvoiceRowViewModel.InvoiceDateCell.CancelEdit" class="button-cross"
									disabled="@anInvoiceRowViewModel.InvoiceDateCell.IsInSubmitState">
								<svg>
									<use href="#cross-icon-svg"></use>
								</svg>
							</button>
						</div>
					</div>

				</div>

				<!-- Reference Number -->
				<div class="invoice-main-details">
					<!-- Read only invoice Reference number -->
					<div class='read-only @(anInvoiceRowViewModel.ReferenceNumberCell.IsBeingEdited == true ? "hide" : "show")'
						 @ondblclick="anInvoiceRowViewModel.ReferenceNumberCell.BeginEdit">
						<div>@anInvoiceRowViewModel.InvoiceData.ReferenceNumber</div>
					</div>
					<!-- Editable invoice reference number -->
					<div class='edit @(anInvoiceRowViewModel.ReferenceNumberCell.IsBeingEdited == true ? "show" : "hide")'>
						<input type="text" @bind-value="anInvoiceRowViewModel.InvoiceEditData.ReferenceNumber"
							   @onkeydown="(async (KeyboardEventArgs evt)=>{await ProcecssKeypress(evt,anInvoiceRowViewModel.ReferenceNumberCell);})" />
						<div class="confirm-or-cancel-container">
							<button @onclick="anInvoiceRowViewModel.ReferenceNumberCell.EndEdit" class="button-tick"
									disabled="@anInvoiceRowViewModel.ReferenceNumberCell.IsInSubmitState">
								<svg>
									<use href="#tick-icon-svg"></use>
								</svg>
							</button>

							<button @onclick="anInvoiceRowViewModel.ReferenceNumberCell.CancelEdit" class="button-cross"
									disabled="@anInvoiceRowViewModel.ReferenceNumberCell.IsInSubmitState">
								<svg>
									<use href="#cross-icon-svg"></use>
								</svg>
							</button>
						</div>
					</div>
				</div>

				<!-- Description -->
				<div class="invoice-main-details">
					<!-- Read only invoice Reference number -->
					<div class='read-only @(anInvoiceRowViewModel.InvoiceDescriptionCell.IsBeingEdited == true ? "hide" : "show")'
						 @ondblclick="anInvoiceRowViewModel.InvoiceDescriptionCell.BeginEdit">
						<div>@anInvoiceRowViewModel.InvoiceData.Description</div>
					</div>
					<!-- Editable invoice reference number -->
					<div class='edit @(anInvoiceRowViewModel.InvoiceDescriptionCell.IsBeingEdited == true ? "show" : "hide")'>
							<input type="text" @bind-value="anInvoiceRowViewModel.InvoiceEditData.Description" autofocus
							   @onkeydown="(async (KeyboardEventArgs evt)=>{await ProcecssKeypress(evt,anInvoiceRowViewModel.InvoiceDescriptionCell);})" />
						<div class="confirm-or-cancel-container">
							<button @onclick="anInvoiceRowViewModel.InvoiceDescriptionCell.EndEdit" class="button-tick"
									disabled="@anInvoiceRowViewModel.InvoiceDescriptionCell.IsInSubmitState">
								<svg>
								<use href="#tick-icon-svg"></use>
								</svg>
							</button>

							<button @onclick="anInvoiceRowViewModel.InvoiceDescriptionCell.CancelEdit" class="button-cross"
									disabled="@anInvoiceRowViewModel.InvoiceDescriptionCell.IsInSubmitState">
								<svg>
									<use href="#cross-icon-svg"></use>
								</svg>
							</button>
						</div>
					</div>
				</div>


				<!-- Invoice Total Ammount -->
				<div class="invoice-main-details">
					<!-- Read only invoice Reference number -->
					<div class='read-only show'>
						<div>£@anInvoiceRowViewModel.InvoiceData.TotalInvoiceAmmount.ToString("0.##")</div>
					</div>
				</div>


				<!-- Payment Type -->
				<div class="invoice-main-details">
					<!-- Read only Payment Type number -->
					<div class='read-only @(anInvoiceRowViewModel.PaymentTypeIdCell.IsBeingEdited == true ? "hide" : "show")'
						 @ondblclick="anInvoiceRowViewModel.PaymentTypeIdCell.BeginEdit">
							<div>@(anInvoiceRowViewModel.InvoiceData.PaymentType == null ? string.Empty : anInvoiceRowViewModel.InvoiceData.PaymentType.Name)</div>
					</div>
					<!-- Editable invoice reference number -->
					<div class='edit @(anInvoiceRowViewModel.PaymentTypeIdCell.IsBeingEdited == true ? "show" : "hide")'>

						<select @bind="anInvoiceRowViewModel.InvoiceEditData.PaymentTypeID">
							<!-- A blank option, which is used to indicate we dont' want a payment type -->
							<option value="-1"></option>
							
							@foreach (var aPayment in this.ViewModel.ListOfPaymentTypes)
							{
								<option value="@aPayment.Id">@aPayment.Name</option>
							}
							
						</select>
						<div class="confirm-or-cancel-container">
							<button @onclick="anInvoiceRowViewModel.PaymentTypeIdCell.EndEdit" class="button-tick"
									disabled="@anInvoiceRowViewModel.PaymentTypeIdCell.IsInSubmitState">
								<svg>
								<use href="#tick-icon-svg"></use>
								</svg>
							</button>

							<button @onclick="anInvoiceRowViewModel.PaymentTypeIdCell.CancelEdit" class="button-cross"
									disabled="@anInvoiceRowViewModel.PaymentTypeIdCell.IsInSubmitState">
								<svg>
									<use href="#cross-icon-svg"></use>
								</svg>
							</button>
						</div>
					</div>
				</div>



				<!-- DateRecievedMoney -->
				<div class="invoice-main-details">
					<!-- Read only invoice date -->
					<div class='read-only @(anInvoiceRowViewModel.DateRecievedMoneyCell.IsBeingEdited == true ? "hide" : "show")'
						 @ondblclick="anInvoiceRowViewModel.DateRecievedMoneyCell.BeginEdit">
						<div>
							@if(anInvoiceRowViewModel.InvoiceData.DateRecievedMoney != null)
							{
								@anInvoiceRowViewModel.InvoiceData.DateRecievedMoney.Value.ToString("dd/MM/yyyy")
							}
						</div>
					</div>
					<!-- Editable DateRecievedMoney -->
					<div class='edit @(anInvoiceRowViewModel.DateRecievedMoneyCell.IsBeingEdited == true ? "show" : "hide")'>
						<input type="date" @bind-value="anInvoiceRowViewModel.InvoiceEditData.DateRecievedMoney" 
							   @onkeydown="(async (KeyboardEventArgs evt)=>{await ProcecssKeypress(evt,anInvoiceRowViewModel.DateRecievedMoneyCell);})" />
						<div class="confirm-or-cancel-container">
							<button @onclick="anInvoiceRowViewModel.DateRecievedMoneyCell.EndEdit" class="button-tick"
									disabled="@anInvoiceRowViewModel.DateRecievedMoneyCell.IsInSubmitState">
								<svg>
									<use href="#tick-icon-svg"></use>
								</svg>
							</button>

							<button @onclick="anInvoiceRowViewModel.DateRecievedMoneyCell.CancelEdit" class="button-cross"
									disabled="@anInvoiceRowViewModel.DateRecievedMoneyCell.IsInSubmitState">
								<svg>
									<use href="#cross-icon-svg"></use>
								</svg>
							</button>
						</div>
					</div>

				</div>
				
				<div class="invoice-main-details">
					<div class='read-only @(anInvoiceRowViewModel.ShouldShow_Print_Info_Delete == true ? "show" : "hide")'>
						<div class="print-info-delete-container">
							<button>
								<svg>
									<use href="#printer-icon-svg"/>
								</svg>
							</button>

							<!-- if this row is selected (i.e. we want to see addishanl information -->
							@if (anInvoiceRowViewModel.AddishanalInvoiceInfo.IsRowSelected == true)
							{
								<button @onclick="() => anInvoiceRowViewModel.AddishanalInvoiceInfo.IsRowSelected = ! anInvoiceRowViewModel.AddishanalInvoiceInfo.IsRowSelected">
									<svg>
										<use href="#info-icon-svg-cancel" />
									</svg>
								</button>
							}
							else
							{
									<!-- if this row is NOT seleted (hide addishanal information -->
								<button @onclick="() => anInvoiceRowViewModel.AddishanalInvoiceInfo.IsRowSelected = ! anInvoiceRowViewModel.AddishanalInvoiceInfo.IsRowSelected">
									<svg>
										<use href="#info-icon-svg" />
									</svg>
								</button>
							}

							<button @onclick="() => anInvoiceRowViewModel.ShouldShow_Print_Info_Delete = false">
								<svg>
									<use href="#bin-icon-svg" />
								</svg>
							</button>

						</div>
					</div>
					
					<!-- should show the confirm/cancel buttons for deleteing the invoice -->
					<div class='read-only @(anInvoiceRowViewModel.ShouldShow_Print_Info_Delete == true ? "hide" : "show")'>
						
						<div class="confirm-delete-container">
							
							<!-- Confirm deleteing invoice -->
							<button @onclick="async () => await this.ViewModel.DeleteInvoice(anInvoiceRowViewModel)">
								<svg>
									<use href="#tick-icon-svg" />
								</svg>
							</button>
							
							<!-- cancel deleting invoice-->
							<button @onclick="() => anInvoiceRowViewModel.ShouldShow_Print_Info_Delete = true">
								<svg>
									<use href="#cross-icon-svg"/>
								</svg>
							</button>

							
						</div>
					</div>

				</div>
					
				<InvoiceAdditionalInfoComponent InvoiceRowAdditionalInfoVM="anInvoiceRowViewModel.AddishanalInvoiceInfo" />
				
			</div>
		}
		</div>
	</div>
</section>



@code {

	public ListInvoicesViewModel ViewModel;

	public ListInvoices()
	{
		this.ViewModel = new ListInvoicesViewModel();
	}
	protected async override void OnParametersSet()
	{
		// inshalize the app settings and http client so server communication can occour.
		this.ViewModel.appSettings = this.appSettings;
		this.ViewModel.httpClient = this.httpClient;
		// get the list of invoices we want to display on the page and pass them into the view model
		await this.ViewModel.Inishalize(SharedData.InvoicesFromSearchResults);

		// we need to listen for this event because some properties values will be changed and the UI will not be updated
		// when they are changed. Calling UpdateUI will call the StateHasChanged event
		this.ViewModel.UiNeedsUpdating += UpdateUI;
	}

	/// <summary>
	/// Looks for the Enter key and Escape key. If enter key EndEdit will be called on EditCellData, else if escape keyn CancelEdit will be called
	/// </summary>
	/// <param name="evt">keyboard event for OnKeyDown event</param>
	/// <param name="EditCellData">The invoice cell that is currently being edit</param>
	/// <returns></returns>
	public async Task ProcecssKeypress(KeyboardEventArgs evt, ListInvoiceRowViewModel.InvoiceEditCellData EditCellData)
	{

		// check which key has been pressed
		switch(evt.Code)
		{
			// if it is the enter key or the num pad ender key
			case "Enter":
			case "NumpadEnter":

				// for the edit cell that was passed in. call EndEdit on it to commit any changes that were made by the user
				// This will make a call to the server to update the database
				await EditCellData.EndEdit();
				break;

			// if it is the escape key
			case "Escape":

				// for the edit cell that was passed in. Call Cancel edit to dundo any changes the user has made.
				EditCellData.CancelEdit();
				break;
		}

		return;



	}

	/// <summary>
	/// Call this method when you want the UI to be updated because of some propertys that have changed
	/// but they have not been updated on the UI
	/// </summary>
	public void UpdateUI()
	{
		this.StateHasChanged();
	}
}
