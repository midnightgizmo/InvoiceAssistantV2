@page "/CreatePrintableInvoicePage";
@using InvoiceAssistantV2.Client.Models.Printer;
@using InvoiceAssistantV2.Client.Models;

@inject NavigationManager NavManager;
@inject ApplicationSharedData SharedData;
@inject HttpClient httpClient;
@inject AppSettings appSettings;
@inject IJSRuntime JS


<section class="main-container">
	
	<header class="page-header">
		<div>
			<div>
				<button @onclick='() => NavManager.NavigateTo("/")'>
					<!-- Back Arrow -->
					<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 37.48 37.48">
						<defs>
							<style>
								.cls-1 {
									fill: none;
									stroke: currentColor;
									stroke-linejoin: round;
									stroke-width: 3px;
								}

								.cls-2 {
									fill: currentColor;
								}</style>
						</defs>
						<circle class="cls-1" cx="18.74" cy="18.74" r="17.24" />
						<path class="cls-2" d="M17.77,30.73a3.11,3.11,0,0,0,2.17,0,4.78,4.78,0,0,0,1.68-1.79,2,2,0,0,0,.32-1.21,9.46,9.46,0,0,0,0-1.06,8,8,0,0,0-.2-1L18.32,22H30.09a2.86,2.86,0,0,0,1.39-.69,6.88,6.88,0,0,0,1-1.86l0-2.19a5.72,5.72,0,0,0-1-1.69,3.36,3.36,0,0,0-1.49-.7l-11.74,0,3.46-3.74a3.39,3.39,0,0,0,.16-2.5A6,6,0,0,0,19.76,6.1,1.74,1.74,0,0,0,18,6L6.41,17a3.25,3.25,0,0,0-.35,1.19,3.76,3.76,0,0,0,.29,1.27L17.77,30.73" />
					</svg>
				</button>
			</div>

			<div><span>Search Invoices</span></div>

			<div class="glasses-container">
				<img src="/images/svg/Printer.svg" />
			</div>

		</div>
	</header>

	<!-- print options-->
	<div class="print-options-container">
		<!-- create pdf-->
		<div>
			<!-- create downloadable pdf document based in data from this page-->
		</div>
		<!-- print this web page using media query print -->
		<div>
			<!-- create a button that simlates ctrl p-->
			<button class="print-button" @onclick=cmdPrintViaBrowser_Click>
				<div>Print using Web browser</div>
				<img src="/images/svg/Printer.svg" alt="printer for webpage" />
			</button>
		</div>
	</div>

	<div class="invoice-template">
		<header class="full-width">
			<div class="full-width border-bottom border-thickness-normal">
				<span class="full-width">@ViewModel.NameOfPersonFillingOutInvoiceFirst</span>
			</div>
		</header>

		<div class="invoice-template-main-content">
			<div class="left-side">
				<header>
					<div>Invoice</div>
				</header>
				<div class="left-side-3-column-grid border-bottom border-thickness-thick">
					<div></div>
					<div class="font-centre font-bold">Date</div>
					<div class="font-centre font-bold">20/10/2023</div>
				</div>

				<div class="left-side-data-with-left-border font-size-small">
					
					<!-- service from -->
					<div class="left-side-2-column-grid border-bottom border-thickness-normal">
						<div><span class="font-size-normal font-bold">Services From</span></div>
						<div></div>
					</div>
					<div class="left-side-2-column-grid">
						<div class="font-italic"><span>Name</span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><span>@ViewModel.NameOfPersonFillingOutInvoiceSecond</span></div>
					</div>
					<div class="left-side-2-column-grid" style="margin-top:25px;">
		

						<!-- line 1 -->
						<div><span>Address</span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line1" /></div>

						<!-- line 2 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line2" /></div>

						<!-- line 3 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line3" /></div>

						<!-- line 4 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line4" /></div>

						<!-- line 5 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line5" /></div>

						<!-- line 6 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey margin-bottom-25"><input @bind-value="ViewModel.AddressOfPersonFillingOutInvoice.Line6" /></div>

					</div>
					<!-- Bill To-->
					<div class="left-side-2-column-grid border-bottom border-top border-bottom-thickness-normal border-top-thickness-thick">
						<div><span class="font-size-normal font-bold">Bill To</span></div>
						<div></div>
					</div>
					<div class="left-side-2-column-grid">
						<div class="font-italic"><span>Name</span></div>
						<input class="border-bottom border-thickness-normal border-color-grey" @bind-value="ViewModel.NameOfCompanyInvoiceMadeOutTo"/>
					</div>
					<div class="left-side-2-column-grid" style="margin-top:25px;">
						
						<!-- line 1 -->
						<div><span>Address</span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line1" /></div>
						
						<!-- line 2 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line2" /></div>

						<!-- line 3 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line3" /></div>

						<!-- line 4 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line4" /></div>

						<!-- line 5 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line5" /></div>

						<!-- line 6 -->
						<div><span></span></div>
						<div class="border-bottom border-thickness-normal border-color-grey"><input @bind-value="ViewModel.AddressOfCompanyInvoiceMadeOutTo.Line6" /></div>
					</div>

					<!-- Payment options -->
					<div class="left-side-2-column-grid border-bottom border-bottom-thickness-normal" style="margin-top:20px;">
						<div style="grid-column: span 2;">
							<span class="font-bold" style="font-size:1.2rem; ">Payment Options</span>
						</div>
						<!--<div></div>-->
					</div>

					<div class="left-side-2-column-grid payment-type-container">
						@foreach(var paymentOption in ViewModel.PaymentOptions)
						{
							<header>
								<input class="font-bold font-size-normal" @bind-value="paymentOption.paymentHeaderText">
							</header>
							

							@foreach(var paymentData in paymentOption.paymentData)
							{
								<input class='padding-right-10 font-italic @(paymentData.value != string.Empty ? "font-right" : "margin-left-20")' @bind-value="paymentData.key">
								<input @bind-value="paymentData.value"/>
							}
						}
					</div>

					<div></div>

				</div>
			</div>
			
			<div class="right-side">
				<div class="reference-number-container border-bottom border-thickness-thick">
					<span>Reference Number:</span>
					<span>@ViewModel.ReferenceNumber</span>
				</div>
				
				<div class="right-side-2-column right-side-2-column-header border-left border-left-thickness-superthick border-right border-right-thickness-normal">
					<div class="border-bottom border-thickness-normal border-right border-right-thickness-thin border-color-black">
						<span>DESCRIPTION</span>
					</div>
					<div class ="border-bottom border-thickness-normal">
						<span>TOTAL</span>
					</div>
				</div>

				
				@foreach (var invoicePayment in ViewModel.PaymentData.InvoicePaymentBreakDown)
				{
					<div class="right-side-2-column right-side-2-column-body-row border-left border-left-thickness-superthick border-right border-right-thickness-normal">
						<div class="border-bottom border-bottom-thickness-thin border-color-grey border-right border-right-thickness-thin">
							<span>
								<input @bind-value="invoicePayment.Description" />
							</span>
						</div>

						<div class="border-bottom border-bottom-thickness-thin border-color-grey">
							<span>
								<input @bind-value="invoicePayment.Ammount"
									   @bind-value:event="oninput"
									   @onblur="(evt) => InVoicePayment_LostFocus(evt,invoicePayment)"
									   @onkeypress="(evt) => InvoicePaymentAmmount_KeyPress(evt,invoicePayment.Ammount)" />
							</span>
						</div>
					</div>
				}
			</div>

		</div>

		<footer>
			<div class="left-side">
				<div style="height:58px;"></div>



				<div style=""></div>
			</div>

			<div class="right-side">
				<div style="height:20px"></div>
				<div class="right-side-2-column">



					<!-- a row -->
					<div></div>
					<div></div>

					<!-- a row -->
					<div></div>
					<div><span>60.00</span></div>

					<!-- a row -->
					<div></div>
					<div></div>
				</div>
			</div>
		</footer>


	</div>


</section>

<div class="page-button-padding">

</div>

@code {

	public InvoicePrinterModel ViewModel { get; set; }

	public CreatePrintableInvoicePage()
	{
		this.ViewModel = new InvoicePrinterModel();

	}

	protected override async Task OnParametersSetAsync()
	{
		await InvoicePrinterModel.CreateModel(this.ViewModel,SharedData,this.httpClient,this.appSettings);
	}

	/// <summary>
	///  when the textbox looses focus
	/// </summary>
	/// <param name="evt"></param>
	/// <param name="paymentRow"></param>
	private void InVoicePayment_LostFocus(FocusEventArgs evt, PaymentDataRow paymentRow)
	{
		// when the ammount textbox looses focus, we want to check the value inputed looks like a 
		// number.
		// it might look like the following
		// £.1
		//£1.
		// the below code will format the string to look like currency
		// e.g. £.1 will go to £0.10
		// e.g. £1. will go to £1

		// Note the pound sign gets added by a paymentRow.Ammount Setter property


		// get a copy of the string we want to modify, this allows us to modify the string without changing the orignal 
		// value which would keep firing a changed event in balzor.
		string inputString = paymentRow.Ammount; // Replace this with your input string
													// if the string starts with a pound sign, remove it to turn it into just a number
		if (inputString.StartsWith("£") == true)
			inputString = inputString.Remove(0, 1);

		// try and parse the string into a number
		if (decimal.TryParse(inputString, out decimal number))
		{
			// if the number containers decimal places, parse the number with 2 decimal places
			// if the number does not have any decimal plces, parse the number with no decimal places
			string formattedString = number.ToString(number % 1 == 0 ? "N0" : "N2");
			// update the model with the formated string
			paymentRow.Ammount = formattedString;
		}


	}

	private async Task cmdPrintViaBrowser_Click()
	{
		
		// Use JavaScript interop to trigger the print dialog
		await JS.InvokeVoidAsync("triggerPrintDialog");
	}
	private void InvoicePaymentAmmount_KeyPress(KeyboardEventArgs evt, string value)
	{
		
	}

	private void InvoicePaymentAmmount_OnChange(ChangeEventArgs evt)
	{

	}

	private void oninput(string value)
	{
		int i = 0;
	}


}
